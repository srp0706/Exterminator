#!/usr/bin/python3
# encoding: utf-8
"""Exterminator is a simple task manager written in Elementary and Python."""

# General imports
import getpass
import threading
import queue as Queue
import psutil
# try:                         # Python 2.x
#     import Queue
# except ModuleNotFoundError:  # Python 3.x

# efl imports
import efl.elementary as elm
from efl.elementary.box import Box
from efl.elementary.button import Button
from efl.elementary.check import Check
from efl.elementary.label import Label
from efl.elementary.icon import Icon
from efl.elementary.frame import Frame
from efl.elementary.progressbar import Progressbar
# from efl.elementary.separator import Separator
from efl.elementary.window import StandardWindow
from efl.elementary.flip import Flip, ELM_FLIP_CUBE_DOWN
from efl.evas import EVAS_HINT_EXPAND, EVAS_HINT_FILL
from efl import ecore

from elmextensions import AboutWindow, InstanceError
from elmextensions import SortedList

__author__ = "Jeff Hoogland"
__contributors__ = ["Jeff Hoogland", "Scimmia"]
__copyright__ = "Copyright (C) 2014 Bodhi Linux"
__version__ = "0.2.4"
__description__ = 'A simple task manager for the Enlightenment Desktop.'
__github__ = 'http://jeffhoogland.github.io/Exterminator/'
__source__ = 'Source code and bug reports: {0}'.format(__github__)
PY_EFL = "https://git.enlightenment.org/bindings/python/python-efl.git/"

AUTHORS = """
<br>
<align=center>
<hilight>Jeff Hoogland (Jef91)</hilight><br>
<link><a href=http://www.jeffhoogland.com>Contact</a></link><br><br>
Scimmia<br><br>
</align>
"""

LICENSE = """<br>
<align=center>
<hilight>
Copyright (c) 2015, Jeff Hoogland<br>
All rights reserved.<br>
</hilight>
<br>
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:<br>
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.<br>
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.<br>
    * Neither the name of the <organization> nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.<br>
<br>
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
</align>
<br>
"""

INFO = """
<align=center>
<hilight>Exterminator</hilight> is a simple task manager written in Elementary
 and Python.<br>
<br>
<br>
</align>
"""

EXPAND_BOTH = EVAS_HINT_EXPAND, EVAS_HINT_EXPAND
EXPAND_HORIZ = EVAS_HINT_EXPAND, 0.0
FILL_BOTH = EVAS_HINT_FILL, EVAS_HINT_FILL
FILL_HORIZ = EVAS_HINT_FILL, 0.5


# class ThreadedFunction(object):
class ThreadedFunction():
    """The ThreadedFunction class."""

    def __init__(self, done_cb=None):
        # private stuff
        self._command_queue = Queue.Queue()
        self._reply_queue = Queue.Queue()
        self._done_cb = done_cb

        # add a timer to check the data returned by the worker thread
        self._timer = ecore.Timer(0.1, self.check_reply_queue)

        # start the working thread
        threading.Thread(target=self.thread_func).start()

    def run(self, action):
        """Adds the desired command (action) to the command queue."""
        self._command_queue.put(action)

    def shutdown(self):
        """Adds the Quit function to the command queue."""
        self._timer.delete()
        self._command_queue.put('QUIT')

    def check_reply_queue(self):
        """Checks if commands in command queue were executed"""
        if not self._reply_queue.empty():
            _ = self._reply_queue.get()
            if callable(self._done_cb):
                self._done_cb()
        return True

    # all the member below this point run in the thread
    def thread_func(self):
        """Executes commands in command queue"""
        while True:
            # wait here until an item in the queue is present
            func = self._command_queue.get()
            if callable(func):
                func()
            elif func == 'QUIT':
                break
            self._reply_queue.put("done")


class MainWindow(StandardWindow):
    """The MainWindow class."""

    def __init__(self):
        """TODO: docstring"""
        StandardWindow.__init__(self,
                                "exterminator",
                                "Exterminator",
                                size=(800, 400))
        self.callback_delete_request_add(self.quit_all)

        icon = Icon(self)
        icon.size_hint_weight_set(EVAS_HINT_EXPAND, EVAS_HINT_EXPAND)
        icon.size_hint_align_set(EVAS_HINT_FILL, EVAS_HINT_FILL)
        icon.standard_set('utilities-system-monitor')
        icon.show()
        self.icon_object_set(icon.object_get())

        self.task_manager = TaskManager(self)
        self.task_manager.show()

        self.resize_object_add(self.task_manager)

    def quit_all(self, _):
        """TODO: docstring"""
        self.task_manager.threaded_function.shutdown()
        elm.exit()


class TaskManager(Box):
    """The TaskManager class. Shows a table with the active
    processes."""

    def __init__(self, parent):
        """TODO: docstring"""
        Box.__init__(self, parent)
        self.win = win = parent
        self.appstokill = []
        self.process = {}

        self.threaded_function = ThreadedFunction(self.refresh_gui)
        self.getting_data = False

        self.size_hint_weight = EXPAND_BOTH
        self.size_hint_align = FILL_BOTH

        self.loop = ecore.timer_add(0.1, self.update)

        self.pids_to_update = {}
        self.pids_to_remove = []

        self.cpu = cpu = psutil.cpu_percent(interval=1) / 100.0
        self.ram = ram = psutil.virtual_memory()

        try:
            # psutil 2.x method
            self.cpu_count = psutil.cpu_count()
        except AttributeError:
            # psutil 1.x method
            self.cpu_count = psutil.NUM_CPUS

        # Totals in MB
        self.ramtota = ramtota = float(ram.total) / (1048576)
        self.ramused = ramused = ramtota * ram.percent * .01

        ramframe = self.ramframe = Frame(self.win)
        ramframe.show()
        ramframe.size_hint_weight = (EVAS_HINT_EXPAND, 0.0)
        ramframe.size_hint_align = FILL_BOTH
        ramframe.text_set("Memory Usage:")

        self.rambar = rambar = Progressbar(self.win,
                                           span_size=250,
                                           size_hint_weight=(EVAS_HINT_EXPAND,
                                                             0.0),
                                           size_hint_align=FILL_HORIZ)
        rambar.show()
        rambar.unit_format = "%.0f MB out of %.0f MB" % (ramused, ramtota)
        rambar.value_set(ramused / ramtota)
        ramframe.content = rambar

        cpuframe = self.cpuframe = Frame(self.win)
        cpuframe.show()
        cpuframe.text_set("CPU Usage:")
        cpuframe.size_hint_weight = (EVAS_HINT_EXPAND, 0.0)
        cpuframe.size_hint_align = FILL_BOTH

        self.cpubar = cpubar = Progressbar(self.win,
                                           span_size=250,
                                           size_hint_weight=(EVAS_HINT_EXPAND,
                                                             0.0),
                                           size_hint_align=FILL_HORIZ)
        cpubar.show()
        cpubar.value_set(cpu)
        cpuframe.content = cpubar
        
        titles = [("PID", True), ("Process Name", True), ("CPU", True),
                  ("Memory", True), ("User", True)]

        self.slist = slist = SortedList(self,
                                        titles=titles,
                                        size_hint_weight=EXPAND_BOTH,
                                        size_hint_align=FILL_BOTH,
                                        homogeneous=True)
        self.get_psutil_data()
        slist.show()

        kills = Button(self.win,
                       size_hint_weight=EXPAND_HORIZ,
                       size_hint_align=FILL_HORIZ)
        kills.text = "Kill Selected Processes"
        kills.callback_clicked_add(self.kill_selected)
        kills.show()

        icon = Icon(self.win, thumb='True')
        icon.standard_set('help-about')

        about = Button(self.win, size_hint_align=(1.0, 0.0))
        about.content = icon
        about.callback_clicked_add(self.show_about)
        about.show()

        top_box = Box(win)
        top_box.horizontal = True
        top_box.pack_end(cpuframe)
        top_box.pack_end(ramframe)
        top_box.show()

        bottom_box = Box(win,
                         size_hint_weight=EXPAND_HORIZ,
                         size_hint_align=FILL_HORIZ)
        bottom_box.horizontal = True
        bottom_box.pack_end(kills)
        bottom_box.pack_end(about)
        bottom_box.show()

        wheel = Progressbar(self,
                            pulse_mode=True,
                            size_hint_weight=EXPAND_BOTH,
                            size_hint_align=FILL_HORIZ)
        wheel.pulse(True)
        wheel.show()

        self.flip = Flip(self,
                         size_hint_weight=EXPAND_BOTH,
                         size_hint_align=FILL_BOTH)
        self.flip.part_content_set("back", self.slist)
        self.flip.part_content_set("front", wheel)
        self.flip.show()

        self.pack_end(top_box)
        self.pack_end(self.flip)
        self.pack_end(bottom_box)


    def update(self, stuff=None, otherstuff=None):
        """TODO: docstring"""
        if not self.getting_data:
            self.threaded_function.run(self.get_psutil_data)

        return 1

    def refresh_gui(self):
        """TODO: docstring"""
        for pid in self.pids_to_update:
            if pid in self.process:
                self.process[pid].update(self.pids_to_update[pid])
            else:
                cess = Process(self, self.pids_to_update[pid])
                self.process[pid] = cess
                self.slist.row_pack(cess, sort=False)

        for pid in self.pids_to_remove:
            if pid in self.process:
                self.slist.row_unpack(self.process[pid], True)
                self.process.pop(pid, None)

        self.pids_to_update.clear()
        del self.pids_to_remove[:]

        self.slist.update()

        self.cpubar.value_set(self.cpu)
        self.rambar.value_set(self.ramused / self.ramtota)
        self.rambar.unit_format = "%.0f MB out of %.0f MB" % (self.ramused,
                                                              self.ramtota)

        if self.flip.front_visible:
            self.flip.go(ELM_FLIP_CUBE_DOWN)

    def run_command(self, command):
        """TODO: docstring"""
        cmd = ecore.Exe(command)
        cmd.on_del_event_add(self.update)

    def kill_selected(self, bt):
        """TODO: docstring"""
        for pid in self.appstokill:
            self.kill_process(pid)

    def check_sel(self, check):
        """Updates the list of processes to kill"""
        if check.state_get():
            self.appstokill.append(check.text)
        else:
            self.appstokill.remove(check.text)
        # print(self.appstokill)

    def kill_process(self, pid):
        """Actually kills the process through a system call"""
        self.run_command("kill -9 %s" % pid)

    def get_psutil_data(self):  # , cmd=False, arg=False):
        """TODO: docstring"""
        # print("cmd %s , arg %s" % (cmd, arg))
        self.getting_data = True
        tmp = list(psutil.process_iter())
        currentpids = []
        for process in tmp:
            try:
                # in psutil 1.2.1 we can reference these directly
                username = process.username
                name = process.name
                if callable(name):
                    # in psutil 2.0 we need to call them
                    username = process.username()
                    name = process.name()
                if username == getpass.getuser():
                    currentpids.append(process.pid)
                    self.pids_to_update[process.pid] = {
                        "pid": process.pid,
                        "name": name,
                        "username": username,
                        "cpu":
                            (process.cpu_percent(interval=0) / self.cpu_count),
                        "mem": float(process.memory_info().rss) / 1048576
                    }
            except TypeError:
                pass
        for pid in self.process:
            if pid not in currentpids:
                self.pids_to_remove.append(pid)

        self.cpu = psutil.cpu_percent(interval=1) / 100.0
        ram = psutil.virtual_memory()

        # Totals in MB
        self.ramtota = float(ram.total) / (1048576)
        self.ramused = self.ramtota * ram.percent * .01
        self.getting_data = False

    def show_about(self, _=False):
        """TODO: docstring"""
        try:
            AboutWindow(self,
                        title="Exterminator",
                        standardicon="utilities-system-monitor",
                        version=__version__,
                        authors=AUTHORS,
                        licen=LICENSE,
                        webaddress=__github__,
                        info=INFO)
        except InstanceError:
            pass


class Process(list):
    """TODO: docstring"""

    def __init__(self, parent, data):
        """TODO: docstring"""
        super().__init__()
        self.win = parent.win
        self.data = data

        process_data = str(data["pid"])

        pid = Check(self.win,
                    size_hint_weight=EXPAND_BOTH,
                    size_hint_align=FILL_BOTH)
        pid.text = process_data
        pid.data["sort_data"] = data["pid"]
        pid.callback_changed_add(parent.check_sel)
        pid.show()

        pname = Label(self.win,
                      size_hint_weight=EXPAND_BOTH,
                      size_hint_align=FILL_BOTH)
        # pname.text = data["name"][0:25]
        pname.text = data["name"]
        pname.show()

        user = Label(self.win,
                     size_hint_weight=EXPAND_BOTH,
                     size_hint_align=FILL_BOTH)
        user.text = data["username"]
        user.show()

        self.cpu = Label(self.win,
                         size_hint_weight=EXPAND_BOTH,
                         size_hint_align=FILL_BOTH)
        cpu = data["cpu"]
        self.cpu.text = "%.0f %%" % cpu
        self.cpu.data["sort_data"] = cpu
        self.cpu.show()

        self.mem = Label(self.win,
                         size_hint_weight=EXPAND_BOTH,
                         size_hint_align=FILL_BOTH)
        mem = data["mem"]
        self.mem.text = "%.1f MB" % mem
        self.mem.data["sort_data"] = mem
        self.mem.show()

        self.append(pid)
        self.append(pname)
        self.append(self.cpu)
        self.append(self.mem)
        self.append(user)

    def update(self, data):
        """TODO: docstring"""
        self.data = data
        cpu = data["cpu"]
        self.cpu.text = "%.0f %%" % cpu
        self.cpu.data["sort_data"] = cpu
        mem = data["mem"]
        self.mem.text = "%.1f MB" % mem
        self.mem.data["sort_data"] = mem


if __name__ == "__main__":
    elm.init()
    GUI = MainWindow()
    GUI.show()
    elm.run()
    elm.shutdown()
